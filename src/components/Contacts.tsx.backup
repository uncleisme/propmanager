import React, { useEffect, useState, useCallback } from "react";
import { supabase } from "../utils/supabaseClient";
import { Eye, Edit, Trash2, Plus, X, Search, ChevronLeft, ChevronRight } from "lucide-react";

import { User } from '@supabase/supabase-js';
import { createContact } from "../utils/createContact";
import { createNotification } from "../utils/notifications";

interface DashboardProps {
  user: User | null;
}

interface Contact {
  id: number;
  name: string;
  address?: string;
  phone: string;
  type?: string;
  company?: string;
  email: string;
  notes?: string;
}

const Contacts: React.FC<DashboardProps> = ({ user }) => {
  const [contacts, setContacts] = useState<Contact[]>([]);
  const [loading, setLoading] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [modalType, setModalType] = useState<"add" | "edit" | "view" | null>(null);
  const [selectedContact, setSelectedContact] = useState<Contact | null>(null);
  const [search, setSearch] = useState("");
  const [errorMsg, setErrorMsg] = useState<string>("");
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize] = useState(10);
  const [totalContacts, setTotalContacts] = useState(0);


  const fetchContacts = useCallback(async () => {
    setLoading(true);
    
    // Test query to check if table exists and get column info
    const { data: testData, error: testError } = await supabase
      .from("contacts")
      .select("*")
      .limit(1);
    
    if (testError) {
      console.error('Error accessing contacts table:', testError);
      setErrorMsg(`Database error: ${testError.message}`);
      setLoading(false);
      return;
    }
    
    console.log('Contacts table accessible, sample data:', testData);
    if (testData && testData.length > 0) {
      console.log('Available columns:', Object.keys(testData[0]));
    }
    
    const from = (currentPage - 1) * pageSize;
    const to = from + pageSize - 1;

    const { data, error, count } = await supabase
      .from("contacts")
      .select("*", { count: "exact" })
      .order("createdAt", { ascending: false })
      .range(from, to);

    if (!error && data) {
      setContacts(data);
      setTotalContacts(count ?? 0);
    } else {
      setErrorMsg(error?.message || "Failed to load contacts.");
    }
    setLoading(false);
  }, [currentPage, pageSize]);

  useEffect(() => {
    fetchContacts();
  }, [fetchContacts]);

  // Reset to first page when search changes
  useEffect(() => {
    setCurrentPage(1);
  }, [search]);

  const handleAdd = () => {
    setModalType("add");
    setSelectedContact(null);
    setShowModal(true);
  };

  const handleView = (contact: Contact) => {
    setModalType("view");
    setSelectedContact(contact);
    setShowModal(true);
  };

  const handleEdit = (contact: Contact) => {
    console.log('Edit button clicked for contact:', contact);
    setModalType("edit");
    setSelectedContact(contact);
    setShowModal(true);
  };

  const handleDelete = async (id: number) => {
    console.log('Delete button clicked for contact ID:', id);
    setErrorMsg("");
    
    // First, check if this contact is referenced by any contracts
    const { data: contractsData, error: contractsError } = await supabase
      .from("contracts")
      .select("id, title, status")
      .eq("contactId", id);
    
    if (contractsError) {
      console.error('Error checking contracts:', contractsError);
      setErrorMsg("Error checking contract references");
      return;
    }
    
    const referencedContracts = contractsData || [];
    
    if (referencedContracts.length > 0) {
      // Contact is referenced by contracts
      const contractList = referencedContracts.map(c => `"${c.title}" (${c.status})`).join('\nâ€¢ ');
      const message = `This contact cannot be deleted because it is referenced by ${referencedContracts.length} contract(s):\n\nâ€¢ ${contractList}\n\nPlease either:\n1. Delete the contracts first, or\n2. Update the contracts to use a different contact.`;
      
      if (window.confirm(message)) {
        // User confirmed, but we still can't delete due to FK constraint
        setErrorMsg("Contact cannot be deleted while it has active contracts. Please remove the contract references first.");
      }
      return;
    }
    
    // No contracts reference this contact, proceed with deletion
    if (window.confirm("Delete this contact?")) {
      // Get contact details before deletion for notification
      const { data: contactData } = await supabase
        .from("contacts")
        .select("name")
        .eq("id", id)
        .single();
      
      const { error } = await supabase.from("contacts").delete().eq("id", id);
      if (error) {
        console.error('Delete error:', error);
        setErrorMsg(error.message);
      } else {
        console.log('Contact deleted successfully');
        
        // Create notification for contact deletion
        if (user && contactData) {
          const message = `Contact "${contactData.name}" has been deleted from the system.`;
          const recipients = [user.id]; // In production, you'd determine recipients based on roles
          
          try {
            await createNotification(
              user.id,
              'contact',
              'deleted',
              id.toString(),
              message,
              recipients
            );
            console.log('ðŸ”” Contact deletion notification created successfully');
          } catch (notificationError) {
            console.error('ðŸ”” Error creating contact deletion notification:', notificationError);
          }
        }
        
        setShowModal(false);
        fetchContacts();
      }
    }
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    console.log('Form submitted, modalType:', modalType);
    setErrorMsg("");
    
    try {
      const form = e.currentTarget;
      const formData = new FormData(form);
      const name = formData.get("name") as string;
      const address = formData.get("address") as string;
      const phone = formData.get("phone") as string;
      const type = formData.get("type") as string;
      const company = formData.get("company") as string;
      const email = formData.get("email") as string;
      const notes = formData.get("notes") as string;

      const contactData = { 
        name: name || '', 
        address: address || null, 
        phone: phone || '', 
        type: type && type.trim() !== '' ? type : null, 
        company: company || null, 
        email: email || '', 
        notes: notes || null,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };
      console.log('Contact data to save:', contactData);

      if (modalType === "add") {
        if (!user) {
          setErrorMsg('User not authenticated');
          return;
        }
        
        const { data, error } = await createContact(user.id, contactData);
        if (error) {
          console.error('Add error:', error);
          setErrorMsg(`Failed to add contact: ${error.message}`);
          return;
        }
        console.log('Contact added successfully:', data);
        setShowModal(false);
        setCurrentPage(1); // Reset to first page, useEffect will fetch contacts
      } else if (modalType === "edit" && selectedContact) {
        console.log('Updating contact with ID:', selectedContact.id);
        console.log('Contact data to update:', contactData);
        
        // First, let's check if the contact exists
        const { data: existingContact, error: checkError } = await supabase
          .from("contacts")
          .select("*")
          .eq("id", selectedContact.id)
          .single();
        
        if (checkError) {
          console.error('Error checking existing contact:', checkError);
          setErrorMsg(`Failed to verify contact exists: ${checkError.message}`);
          return;
    }
    
    console.log('Existing contact found:', existingContact);
    
    const { data, error } = await supabase
      .from("contacts")
      .update({ ...contactData })
      .eq("id", selectedContact.id)
      .select();
    if (error) {
      console.error('Update error:', error);
      setErrorMsg(`Failed to update contact: ${error.message}`);
      return;
    }
    console.log('Contact updated successfully:', data);
    
    // Create notification for contact update
    if (user) {
      const message = `Contact "${contactData.name}" has been updated in the system.`;
      const recipients = [user.id]; // In production, you'd determine recipients based on roles
      
      try {
        await createNotification(
          user.id,
          'contact',
          'updated',
          selectedContact.id.toString(),
          message,
          recipients
        );
        console.log('ðŸ”” Contact update notification created successfully');
      } catch (notificationError) {
        console.error('ðŸ”” Error creating contact update notification:', notificationError);
      }
    }
    
    setShowModal(false);
    fetchContacts(); // Keep for updates, as page doesn't change
  }
  } catch (error) {
    console.error('Unexpected error:', error);
    setErrorMsg(`An unexpected error occurred: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
};

  // Filter contacts by search
  const filteredContacts = contacts.filter(
    (c) =>
      c.name.toLowerCase().includes(search.toLowerCase()) ||
      c.email.toLowerCase().includes(search.toLowerCase()) ||
      c.phone.toLowerCase().includes(search.toLowerCase()) ||
      (c.type?.toLowerCase() || "").includes(search.toLowerCase())
  );

  return (
    <div>
      {/* Header Section */}
      <div className="flex flex-col md:flex-row items-center justify-between mb-6">
        <div className="text-center md:text-left">
          <h1 className="text-3xl font-bold text-gray-900">Contacts</h1>
          <p className="text-gray-600">Manage all contacts</p>
        </div>
        <div className="flex flex-col md:flex-row mt-4 md:mt-0 space-y-4 md:space-y-0 md:space-x-4">
          <button
            onClick={handleAdd}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center space-x-2 hover:bg-blue-700 transition-colors duration-200"
          >
            <Plus className="w-4 h-4" />
            <span>Add Contact</span>
          </button>
        </div>
      </div>

      {/* Search Bar */}
      <div className="relative w-full max-w-md mb-6">
        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <Search className="w-5 h-5 text-gray-400" />
        </div>
        <input
          type="text"
          placeholder="Search by name, email, or phone..."
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        />
      </div>

      {/* Error Message Display */}
      {errorMsg && (
        <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-3">
              <h3 className="text-sm font-medium text-red-800">Error</h3>
              <div className="mt-2 text-sm text-red-700 whitespace-pre-line">{errorMsg}</div>
            </div>
            <div className="ml-auto pl-3">
              <button
                onClick={() => setErrorMsg("")}
                className="inline-flex text-red-400 hover:text-red-500"
              >
                <X className="h-4 w-4" />
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Contacts Table */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/4">
                  Name
                </th>
                <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/6 hidden md:table-cell">
                  Company
                </th>
                <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden lg:table-cell">
                  Email
                </th>
                <th className="px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden xl:table-cell">
                  Phone
                </th>
                <th className="px-4 sm:px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider w-24">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {loading ? (
                <tr>
                  <td colSpan={5} className="px-4 sm:px-6 py-12 whitespace-nowrap text-center">
                    <div className="flex justify-center items-center">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                      <span className="ml-3 text-gray-500">Loading contacts...</span>
                    </div>
                  </td>
                </tr>
              ) : filteredContacts.length === 0 ? (
                <tr>
                  <td colSpan={5} className="px-4 sm:px-6 py-12 whitespace-nowrap text-center">
                    <div className="text-gray-500">
                      <div className="text-lg font-medium mb-2">No contacts found</div>
                      <div className="text-sm">Try adjusting your search or add a new contact</div>
                    </div>
                  </td>
                </tr>
              ) : (
                filteredContacts.map((contact) => (
                  <tr key={contact.id} className="hover:bg-gray-50 transition-colors duration-150">
                    {/* Name */}
                    <td className="px-4 sm:px-6 py-1 sm:py-4 whitespace-nowrap w-1/4">
                      <div className="text-sm font-medium text-gray-900 truncate max-w-xs" title={contact.name}>
                        {contact.name}
                      </div>
                      {/* Company name stacked under name on mobile */}
                      <div className="text-xs text-gray-500 mt-1 md:hidden">
                        {contact.company || '-'}
                      </div>
                    </td>

                    {/* Company */}
                    <td className="px-4 sm:px-6 py-1 sm:py-4 whitespace-nowrap w-1/6 hidden md:table-cell">
                      <div className="text-sm text-gray-900 truncate max-w-xs" title={contact.company || '-'}>
                        {contact.company || '-'}
                      </div>
                    </td>

                    {/* Email */}
                    <td className="px-4 sm:px-6 py-1 sm:py-4 whitespace-nowrap hidden lg:table-cell">
                      <div className="text-sm text-gray-900 truncate max-w-xs" title={contact.email}>
                        {contact.email}
                      </div>
                    </td>

                    {/* Phone */}
                    <td className="px-4 sm:px-6 py-1 sm:py-4 whitespace-nowrap hidden xl:table-cell">
                      <div className="text-sm text-gray-900">{contact.phone}</div>
                    </td>

                    {/* Actions */}
                    <td className="px-4 sm:px-6 py-1 sm:py-4 whitespace-nowrap text-right text-sm font-medium w-24">
                      <div className="flex items-center justify-end space-x-2">
                        <button
                          onClick={() => handleView(contact)}
                          className="p-1 sm:p-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-md transition-colors duration-150"
                          title="View Details"
                        >
                          <Eye className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() => handleEdit(contact)}
                          className="p-1 sm:p-2 text-yellow-600 hover:text-yellow-800 hover:bg-yellow-50 rounded-md transition-colors duration-150"
                          title="Edit Contact"
                        >
                          <Edit className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() => handleDelete(contact.id)}
                          className="p-1 sm:p-2 text-red-600 hover:text-red-800 hover:bg-red-50 rounded-md transition-colors duration-150"
                          title="Delete Contact"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>

      {/* Pagination Controls and Total Count */}
      <div className="flex flex-col md:flex-row md:justify-between md:items-center mt-6 gap-4">
        <div className="flex items-center space-x-2">
          <button
            onClick={() => setCurrentPage((p) => Math.max(1, p - 1))}
            disabled={currentPage === 1}
            className="flex items-center px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 hover:text-gray-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200"
          >
            <ChevronLeft className="w-4 h-4 mr-1" />
            Previous
          </button>
          <span className="text-sm text-gray-700">
            Page {currentPage} of {Math.ceil(totalContacts / pageSize) || 1}
          </span>
          <button
            onClick={() => setCurrentPage((p) => (p * pageSize < totalContacts ? p + 1 : p))}
            disabled={currentPage * pageSize >= totalContacts}
            className="flex items-center px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 hover:text-gray-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200"
          >
            Next
            <ChevronRight className="w-4 h-4 ml-1" />
          </button>
        </div>
        <div className="text-sm text-gray-600">
          Total: {totalContacts} entries
        </div>
      </div>

      {/* Modal */}
      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-bold text-gray-900">
                  {modalType === "view" ? "Contact Details" : modalType === "add" ? "Add Contact" : "Edit Contact"}
                </h2>
                <button
                  onClick={() => setShowModal(false)}
                  className="p-2 hover:bg-gray-100 rounded-lg transition-colors duration-200"
                >
                  <X className="w-5 h-5 text-gray-500" />
                </button>
              </div>

              {modalType === "view" && selectedContact && (
                <div className="space-y-6">
                  {/* Basic Information Section */}
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                      <span className="w-2 h-2 bg-blue-500 rounded-full mr-3"></span>
                      Basic Information
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="text-xs text-gray-500 uppercase tracking-wide mb-1">Name</p>
                        <p className="text-sm text-gray-900 font-medium">{selectedContact.name}</p>
                      </div>
                      <div>
                        <p className="text-xs text-gray-500 uppercase tracking-wide mb-1">Email</p>
                        <p className="text-sm text-gray-900 font-medium">{selectedContact.email}</p>
                      </div>
                      <div>
                        <p className="text-xs text-gray-500 uppercase tracking-wide mb-1">Phone</p>
                        <p className="text-sm text-gray-900 font-medium">{selectedContact.phone}</p>
                      </div>
                      <div>
                        <p className="text-xs text-gray-500 uppercase tracking-wide mb-1">Type</p>
                        <p className="text-sm text-gray-900 font-medium capitalize">{selectedContact.type || '-'}</p>
                      </div>
                    </div>
                  </div>

                  {/* Company & Address Section */}
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                      <span className="w-2 h-2 bg-green-500 rounded-full mr-3"></span>
                      Company & Address
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <p className="text-xs text-gray-500 uppercase tracking-wide mb-1">Company</p>
                        <p className="text-sm text-gray-900">{selectedContact.company || '-'}</p>
                      </div>
                      <div>
                        <p className="text-xs text-gray-500 uppercase tracking-wide mb-1">Address</p>
                        <p className="text-sm text-gray-900">{selectedContact.address || '-'}</p>
                      </div>
                    </div>
                  </div>

                  {/* Additional Information Section */}
                  {selectedContact.notes && (
                    <div className="bg-gray-50 p-4 rounded-lg">
                      <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                        <span className="w-2 h-2 bg-purple-500 rounded-full mr-3"></span>
                        Additional Information
                      </h3>
                      <div>
                        <p className="text-xs text-gray-500 uppercase tracking-wide mb-1">Notes</p>
                        <p className="text-sm text-gray-600 whitespace-pre-line">{selectedContact.notes}</p>
                      </div>
                    </div>
                  )}
                </div>
              )}

              {(modalType === "add" || modalType === "edit") && (
                <form onSubmit={handleSubmit} className="space-y-6">
                  {/* Basic Information Section */}
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                      <span className="w-2 h-2 bg-blue-500 rounded-full mr-3"></span>
                      Basic Information
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Name</label>
                        <input
                          name="name"
                          defaultValue={modalType === "edit" && selectedContact ? selectedContact.name : ""}
                          required
                          className="w-full px-3 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white"
                          placeholder="Enter full name"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Email</label>
                        <input
                          name="email"
                          type="email"
                          defaultValue={modalType === "edit" && selectedContact ? selectedContact.email : ""}
                          required
                          className="w-full px-3 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white"
                          placeholder="Enter email address"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Phone</label>
                        <input
                          name="phone"
                          defaultValue={modalType === "edit" && selectedContact ? selectedContact.phone : ""}
                          required
                          className="w-full px-3 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white"
                          placeholder="Enter phone number"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Type</label>
                        <select
                          name="type"
                          defaultValue={modalType === "edit" && selectedContact ? selectedContact.type || "" : ""}
                          className="w-full px-3 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white"
                        >
                          <option value="">Select type (optional)</option>
                          <option value="contractor">Contractor</option>
                          <option value="supplier">Supplier</option>
                          <option value="service provider">Service Provider</option>
                          <option value="resident">Resident</option>
                          <option value="government">Government</option>
                          <option value="others">Others</option>
                        </select>
                      </div>
                    </div>
                  </div>

                  {/* Company & Address Section */}
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                      <span className="w-2 h-2 bg-green-500 rounded-full mr-3"></span>
                      Company & Address
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Company</label>
                        <input
                          name="company"
                          defaultValue={modalType === "edit" && selectedContact ? selectedContact.company || "" : ""}
                          className="w-full px-3 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white"
                          placeholder="Enter company name"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Address</label>
                        <input
                          name="address"
                          defaultValue={modalType === "edit" && selectedContact ? selectedContact.address || "" : ""}
                          className="w-full px-3 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white"
                          placeholder="Enter address"
                        />
                      </div>
                    </div>
                  </div>

                  {/* Additional Information Section */}
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                      <span className="w-2 h-2 bg-purple-500 rounded-full mr-3"></span>
                      Additional Information
                    </h3>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Notes</label>
                      <textarea
                        name="notes"
                        rows={4}
                        defaultValue={modalType === "edit" && selectedContact ? selectedContact.notes || "" : ""}
                        className="w-full px-3 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white"
                        placeholder="Add any additional notes or comments about this contact..."
                      />
                    </div>
                  </div>

                  {/* Action Buttons */}
                  <div className="flex justify-center space-x-4 mt-8">
                    <button
                      type="button"
                      onClick={() => setShowModal(false)}
                      className="px-6 py-3 border-2 border-red-300 rounded-lg text-red-600 hover:bg-red-50 hover:border-red-400 transition-colors duration-200 font-medium"
                    >
                      Cancel
                    </button>
                    <button
                      type="submit"
                      className="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors duration-200 font-medium shadow-sm"
                    >
                      {modalType === "add" ? "Add Contact" : "Update Contact"}
                    </button>
                  </div>
                </form>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Contacts; 